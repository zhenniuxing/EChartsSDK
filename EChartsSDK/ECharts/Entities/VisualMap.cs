///////////////////////////////////////////////////////////
//  VisualMap.cs
//  Implementation of the Class VisualMap
//  Generated by Enterprise Architect
//  Created on:      24-7月-2018 10:37:00
//  Original author: zhangxiaobo
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using ECharts.Entities.style;


namespace ECharts.Entities
{

    public class VisualMap : Basic<VisualMap>
    {

        /**
        * 是否启用值域漫游
        */
        public VisualMapType type { get; set; }
        /**
        * 是否启用值域漫游
        */
        public bool? calculable { get; set; }

        /**
        * 拖拽时，是否实时更新
        */
        public bool? realtime { get; set; }
        /**
        *  数据展示的小数精度，默认为0，无小数点
        */
        public int? precision { get; set; }
        /**
        * 图形的宽度，即长条的宽度
        */
        public int? itemWidth { get; set; }

        /**
        * 图形的高度，即长条的高度
        */
        public int? itemHeight { get; set; }

        /**
        * 指定组件中手柄和文字的摆放关系
        */
        public HorizontalType? align { get; set; }
        /**
        * 指定用数据的『哪个维度』，映射到视觉元素上
        */
        public object dimension { get; set; }
        /**
        * 指定取哪个系列的数据，即哪个系列的 series.data
        */
        public int? seriesIndex { get; set; }
        /**
        * 定义 在选中范围中 的视觉元素
        */
        public VisualItem inRange { get; set; }

        /**
        * 定义 在选中范围外 的视觉元素
        */
        public VisualItem outOfRange { get; set; }

        /**
        * 标签的格式化工具
        */
        public object formatter { get; set; }

        /**
        * 选择模式
        */
        public object selectedMode { get; set; }

        /**
        *文本风格
        */
        public TextStyle textStyle { get; set; }

        /**
        *文本风格
        */
        public object[] text { get; set; }

        /**
        *文本风格
        */
        public object[] textGap { get; set; }

        /**
        *文本风格
        */
        public object[] pieces { get; set; }
        /**
        *用于表示离散型数据（或可以称为类别型数据、枚举型数据）的全集
        * categories: ['严重污染', '重度污染', '中度污染', '轻度污染', '良', '优'],
        */
        public object[] categories { get; set; }



        public VisualMap Type(VisualMapType type)
        {
            this.type = type;
            return this;
        }


        public VisualMap Calculable(bool calculable)
        {
            this.calculable = calculable;
            return this;
        }

        public VisualMap Realtime(bool realtime)
        {
            this.realtime = realtime;
            return this;
        }

        public VisualMap Precision(int precision)
        {
            this.precision = precision;
            return this;
        }

        public VisualMap ItemWidth(int itemWidth)
        {
            this.itemWidth = itemWidth;
            return this;
        }

        public VisualMap ItemHeight(int itemHeight)
        {
            this.itemHeight = itemHeight;
            return this;
        }

        public VisualMap Align(HorizontalType align)
        {
            this.align = align;
            return this;
        }
        public VisualMap Dimension(object dimension)
        {
            this.dimension = dimension;
            return this;
        }

        public VisualMap SeriesIndex(int seriesIndex)
        {
            this.seriesIndex = seriesIndex;
            return this;
        }

        public VisualItem InRange( )
        {
            this.inRange = new VisualItem();
            return this.inRange;
        }
        public VisualItem OutOfRange( )
        {
            this.outOfRange = new VisualItem();
            return this.outOfRange;
        }

        public VisualMap Formatter(object formatter)
        {
            this.formatter = formatter;
            return this;
        }

        public VisualMap SelectedMode(object selectedMode)
        {
            this.selectedMode = selectedMode;
            return this;
        }

        public TextStyle TextStyle()
        {
            this.textStyle = new TextStyle();
            return this.textStyle;
        }

        public VisualMap Text(params object[] text)
        {
            this.text = text;
            return this;
        }
        public VisualMap TextGap(params object[] textGap)
        {
            this.textGap = textGap;
            return this;
        }
        public VisualMap Pieces(params object[] pieces)
        {
            this.pieces = pieces;
            return this;
        }

        public VisualMap Categories(params object[] categories)
        {
            this.categories = categories;
            return this;
        }
    }//end BrushVisual

}//end namespace Entities